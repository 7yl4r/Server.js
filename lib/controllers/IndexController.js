/*! @license ©2015 Ruben Verborgh - Multimedia Lab / iMinds / Ghent University */

/** An IndexController responds to requests for indexes */

var Controller = require('./Controller'),
    url = require('url'),
    _ = require('lodash'),
    N3Util = require('n3').Util,
    Util = require('../Util');

// Creates a new IndexController
function IndexController(options) {
  if (!(this instanceof IndexController))
    return new IndexController(options);
  options = options || {};
  Controller.call(this, options);
  this._indexes = options.indexes;
  this._routers = options.routers || [];
}
Controller.extend(IndexController);

// Try to serve the requested fragment
IndexController.prototype._handleRequest = function (request, response, next) {
  // Create the query from the request by calling the fragment routers
  var requestParams = { url: request.parsedUrl },
      query = this._routers.reduce(function (query, router) {
    try { router.extractQueryParams(requestParams, query); }
    catch (e) { /* ignore routing errors */ }
    return query;
  }, { features: [] });

  // Execute the query on the data source
  var indexSettings = query.features.datasource && query.index && this._indexes[query.index];
  if (!indexSettings || !indexSettings.index.supportsQuery(query))
    return next();

  // Write the query result
  var view = this._negotiateView('TriplePatternFragments', request, response),
      settings = this._createFragmentMetadata(request, query, indexSettings);
  settings.resultStream = indexSettings.index.select(query,
                          function (error) { error && next(error); });

  view.render(settings, request, response);
};

// Creates metadata about the requested index
IndexController.prototype._createFragmentMetadata =
function (request, query, datasourceSettings) {
  // TODO: these URLs should be generated by the routers
  var requestUrl = request.parsedUrl,
      // maintain the originally requested query string to avoid encoding differences
      origQuery = request.url.replace(/[^?]+/, ''),
      pageUrl = url.format(requestUrl).replace(/\?.*/, origQuery),
      paramsNoPage = _.omit(requestUrl.query, 'page'),
      currentPage = parseInt(requestUrl.query.page, 10) || 1,
      datasourceUrl = url.format(_.omit(requestUrl, 'query')),
      fragmentUrl = url.format(_.defaults({ query: paramsNoPage }, requestUrl)),
      fragmentPageUrlBase = fragmentUrl + (/\?/.test(fragmentUrl) ? '&' : '?') + 'page=',
      indexUrl = url.format(_.omit(requestUrl, 'search', 'query', 'pathname')) + '/';

  // Generate a textual representation of the pattern
  query.patternString = '{ ' +
    (query.subject              ? '<' + query.subject   + '> ' : '?s ') +
    (query.predicate            ? '<' + query.predicate + '> ' : '?p ') +
    (N3Util.isIRI(query.object) ? '<' + query.object    + '> ' : (query.object || '?o')) + ' }';

  return {
    datasource: _.assign(_.omit(datasourceSettings, 'datasource'), {
      index: indexUrl + '#dataset',
      url: datasourceUrl + '#dataset',
      templateUrl: datasourceUrl + '{?subject,predicate,object}',
    }),
    fragment: {
      url: fragmentUrl,
      pageUrl: pageUrl,
      firstPageUrl: fragmentPageUrlBase + '1',
      nextPageUrl: fragmentPageUrlBase + (currentPage + 1),
      previousPageUrl: currentPage > 1 ? fragmentPageUrlBase + (currentPage - 1) : null,
    },
    query: query,
    prefixes: this._prefixes,
    datasources: this._datasources,
  };
};

// Close all data sources
IndexController.prototype.close = function () {
  for (var indexName in this._indexes) {
    try { this._indexes[indexName].index.close(); }
    catch (error) { }
  }
};

module.exports = IndexController;
